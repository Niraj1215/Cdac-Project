# -*- coding: utf-8 -*-
"""Real Estate Sales Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EFPFOCFMI4ubTM8_KCEVfL5c54XA-oEs
"""

import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import style
import seaborn as sns
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

data=pd.read_csv("Real_Estate_Sales.csv")

data.shape

data.sample(10)

data.info()

data.isnull().sum()

data.describe()

data.columns

data['Property Type'].value_counts() #to check the types of property sold and their popularity

data.dtypes # checking datatypes

"""# CHANGING DATA TYPE"""

# in this we need change type of property, residential (object)into category
data["Property Type"]=data["Property Type"].astype('category')
data["Residential Type"]=data["Residential Type"].astype('category') #it helps in saving space or memory
data.dtypes

data.sort_values("Assessed Value",ascending=False).head(5) # Sorting



"""#Mathematical operation"""

data["Years until sold"].mean() # mathematical operation

data["Sale Amount"].mean()

data["Assessed Value"].median()

"""# SELECTING RANDOM DATA"""

data.sample(n=10) #for 10 random samples

"""# Modelling
This is a simple linear regression example using a subset of features. You may need to adjust the features, explore other regression algorithms, or perform additional preprocessing based on the characteristics of your data and the specific problem you are trying to solve
"""

selected_town = 'Manchester'

# Filter the dataset for the selected town
town_data = data[data['Town'] == selected_town]

# Drop unnecessary columns
columns_to_drop = ['Serial Number', 'Date Recorded', 'Address', 'Town']
town_data.drop(columns=columns_to_drop, inplace=True)

# Select features and target variable
features = ['Assessed Value', 'Sales Ratio', 'Years until sold']
target = 'Sale Amount'

import numpy as np
town_data['Assessed Value'] = np.log(town_data['Assessed Value']+1)
town_data[target] = np.log(town_data[target]+1)

# Split the data into features (X) and target variable (y)
X = town_data[features]
y = town_data[target]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import Lasso, Ridge





# Initialize and train Lasso (L1) regression model
lasso_model = Lasso(max_iter=100000)  # Set the regularization strength (alpha) parameter
lasso_model.fit(X_train, y_train)

# Initialize and train Ridge (L2) regression model
ridge_model = Ridge()  # Set the regularization strength (alpha) parameter
ridge_model.fit(X_train, y_train)

# Make predictions on the testing set for both models
lasso_pred = lasso_model.predict(X_test)
ridge_pred = ridge_model.predict(X_test)

# Calculate Mean Squared Error (MSE) for Lasso model
lasso_mse = mean_squared_error(y_test, lasso_pred)

# Calculate Mean Squared Error (MSE) for Ridge model
ridge_mse = mean_squared_error(y_test, ridge_pred)

print("Mean Squared Error (MSE) for Lasso:", lasso_mse)
print("Mean Squared Error (MSE) for Ridge:", ridge_mse)
lasso_r2=r2_score(y_test,lasso_pred)
print(lasso_r2)
ridge_r2=r2_score(y_test,ridge_pred)
print(ridge_r2)

# Plotting the MSE for Lasso and Ridge models
plt.figure(figsize=(8, 6))
plt.bar(['Lasso', 'Ridge'], [lasso_mse, ridge_mse], color=['blue', 'green'])
plt.xlabel('Regression Model')
plt.ylabel('Mean Squared Error (MSE)')
plt.title('Mean Squared Error (MSE) for Lasso and Ridge Models')
plt.show()

# Plotting the R-squared (R2) score for Lasso and Ridge models
plt.figure(figsize=(8, 6))
plt.bar(['Lasso', 'Ridge'], [lasso_r2, ridge_r2], color=['blue', 'green'])
plt.xlabel('Regression Model')
plt.ylabel('R-squared (R2) Score')
plt.title('R-squared (R2) Score for Lasso and Ridge Models')
plt.show()



# Standardize the features using StandardScaler
scaler = StandardScaler()
X_train_scaler = scaler.fit_transform(X_train)
X_test_scaler = scaler.transform(X_test)

# Initialize the linear regression model
model = LinearRegression()

# Fit the model to the training data
model.fit(X_train_scaler, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test_scaler)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')



# Iterate over each unique town and create scatter plots
# for town in data['Town'].unique():
#     town_data = data[data['Town'] == selected_town]
#     plt.figure(figsize=(10, 6))
#     plt.scatter(town_data[features[0]], town_data[target], label=features[0])
#     plt.scatter(town_data[features[1]], town_data[target], label=features[1])
#     plt.scatter(town_data[features[2]], town_data[target], label=features[2])
#     plt.title(f'Scatter Plot for {town}')
#     plt.xlabel('Feature Values')
#     plt.ylabel('Sale Amount')
#     plt.legend()
#     plt.show()

import matplotlib.pyplot as plt
selected_town = 'Manchester'
#Plot the bar plot
plt.figure(figsize=(10, 6))
plt.bar(town_data['Residential Type'], town_data['Sale Amount'])
plt.title(f'Sale Amounts for {selected_town}')
plt.xlabel('Residential Type')
plt.ylabel('Sale Amount')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.show()

# Visualize predictions vs. actual values using Seaborn
plt.figure(figsize=(10, 6))
sns.regplot(x=y_test, y=y_pred, scatter_kws={'alpha':0.3})
plt.xlabel('Actual Sale Amount')
plt.ylabel('Predicted Sale Amount')
plt.title('Actual vs. Predicted Sale Amount')
plt.show()

"""VISUALIZING DATA

which property gets sold immediately or without much delay? (By this we can analyze which type of properties buyers are more interested in )
"""

plt.figure(figsize=(15,10))
sns.barplot(x="Property Type",y="Years until sold",data =data)
plt.show()

"""# To find sales in each year"""

plt.figure(figsize=(15, 10))
sns.barplot(x="List Year", y="Sale Amount", data=data)   #Note use of barplot which allows us to compare different sets of data among different groups easily.
plt.xticks(rotation='vertical')
plt.ylabel('Sales',fontsize=25)                         #Note labelling of y-axis
plt.xlabel('Year',fontsize=25)                          #Note labelling of x_axis
plt.show()

"""# number of properties sold in each year
summary In this comprehensive analysis of the real estate sales dataset, we delved into the intricacies of property transactions to extract meaningful insights. Leveraging data analytical techniques, the study focuses on uncovering key trends, identifying regional variations, and understanding the factors influencing property values
"""

plt.figure(figsize=(15, 10))
sns.countplot(x="List Year",data=data, order = data.groupby(by=['List Year'])['Property Type'].count().sort_values(ascending=False).index)
plt.xticks(rotation='vertical')
plt.title('Properties sold in each year',fontsize=40)    #Note adding a title to the data
plt.ylabel('Count',fontsize = 25)                     #Note labelling the y-axis by count.
plt.xlabel('Year',fontsize = 25)                      #Note labelling the x-axis by year.
plt.show()









